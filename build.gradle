import static org.springframework.util.StringUtils.hasLength

plugins {
  id 'java'
  id 'java-library'
  id 'org.springframework.boot' version '3.2.4'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'com.google.osdetector' version '1.7.0'
  id 'com.google.cloud.tools.jib' version '3.4.1'
}

group = 'run.freshr'
version = '0.0.1-SNAPSHOT'

java {
  sourceCompatibility = '17'
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  maven {
    url "https://:${githubPackageRead}@maven.pkg.github.com/${githubOwner}/*"
//    url "${nexusRepository}/maven-public/"
  }
  mavenCentral()
}

ext {
  set('springCloudVersion', "2023.0.1")
}

// dependencyManagement 기능을 dependencies 에서 사용하기 위해서는 dependencies 보다 위에 작성해야한다.
dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

dependencies {
  // Test
  testImplementation 'org.springframework.boot:spring-boot-starter-test'

  // Eureka Client
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

  // Cloud Config Client
  implementation 'org.springframework.cloud:spring-cloud-starter-config'

  // Gateway
  implementation 'org.springframework.cloud:spring-cloud-starter-gateway'

  // Validation
  implementation 'org.springframework.boot:spring-boot-starter-validation'

  // JWT: library-core-utils
  implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

  // Configuration Processor
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

  // LOMBOK
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  // JPA
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

  // QueryDsl
  implementation "com.querydsl:querydsl-jpa:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
  annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
  testImplementation 'com.querydsl:querydsl-jpa'
  testAnnotationProcessor 'com.querydsl:querydsl-apt'

  // Postgres
  runtimeOnly 'org.postgresql:postgresql'

  // Redis
  implementation 'org.springframework.boot:spring-boot-starter-data-redis'

  // Elasticsearch
  implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

  // Jakarta: JPA & QueryDsl
  annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
  annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

  // MAC OS DNS 이슈
  if (osdetector.arch == "aarch_64") {
    implementation("io.netty:netty-all")
  }

  // FreshR
  implementation "${group}:library-core-unit:1.0.0.RELEASE"
  implementation "${group}:library-core-utils:1.0.0.RELEASE"
  implementation "${group}:library-core-enumeration-mapper:1.0.0.RELEASE"
  implementation "${group}:library-core-exceptions:1.0.0.RELEASE"

  api "${group}:configure-extensions:1.0.0.RELEASE"
  api "${group}:configure-jpa:1.0.0.RELEASE"
  api "${group}:configure-redis:1.0.0.RELEASE"
  api "${group}:configure-elasticsearch:1.0.0.RELEASE"

  api "${group}:extension-entity:1.0.0.RELEASE"
  api "${group}:extension-auth:1.0.0.RELEASE"
}

test {
  useJUnitPlatform()
}

jib {
  from {
    image = 'openjdk:17-jdk-alpine'
  }
  to {
    image = "${githubPackageContainer}/${githubOwner}/${rootProject.name}:" +
            System.getenv("GITHUB_PROFILE") +
            (hasLength(System.getenv("GITHUB_PROFILE")) ? "-" : "") +
            "${version}"
    auth {
      username = System.getenv("GITHUB_ACTOR").toString()
      password = System.getenv("GITHUB_TOKEN").toString()
    }
  }
}
